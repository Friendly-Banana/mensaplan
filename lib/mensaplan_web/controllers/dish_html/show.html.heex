<div class="mx-auto text-zinc-700" itemscope itemtype="https://schema.org/Product">
  <.header>
    <span itemprop="name"><%= @page_title %></span>
    <:subtitle>
      <%= ngettext(
        "This dish was offered one time:",
        "This dish was offered %{count} times:",
        Enum.count(@served_dates)
      ) %>
      <noscript>
        <%= Enum.join(@served_dates, ", ") %>
      </noscript>
      <span id="served-dates"></span>
    </:subtitle>
  </.header>

  <.list>
    <:item title={gettext("Price for students")}>
      <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
        <span itemprop="price"><%= @dish.price %></span>
        <meta itemprop="priceCurrency" content="EUR">
        <link itemprop="availability" href="https://schema.org/InStock">
      </span>
    </:item>
    <:item title={gettext("Category")}>
      <span itemprop="category"><%= @dish.category %></span>
    </:item>
  </.list>

  <div id="calendar" class="hidden text-center" data-served-dates={Jason.encode!(@served_dates)}>
    <div id="header" class="mb-4">
      <button
        title="Previous"
        onclick="previous()"
        class="text-zinc-500 hover:bg-blue-50 hover:text-blue-600 rounded cursor-pointer"
      >
        <.icon name="hero-chevron-left" />
      </button>
      <button
        id="quick-select"
        title="Select month"
        onclick="select()"
        class="hover:bg-blue-50 hover:text-blue-600 rounded cursor-pointer"
      >
        October 2023
      </button>

      <button
        title="Next"
        onclick="next()"
        class="text-zinc-500 hover:bg-blue-50 hover:text-blue-600 rounded cursor-pointer"
      >
        <.icon name="hero-chevron-right" />
      </button>
    </div>
    <div id="day-header" class="text-sm font-medium text-gray-500"></div>
    <div id="days"></div>
  </div>
</div>
<script async>
    const calendar = document.getElementById("calendar");
    const servedDates = JSON.parse(calendar.dataset.servedDates).map((d) => new Date(d));
    const list = document.getElementById("served-dates");
    list.textContent = servedDates.map((d) => d.toLocaleDateString()).join(", ");

    const headerEl = document.getElementById("quick-select");
    const daysEl = document.getElementById("days");
    const dayHeader = document.getElementById("day-header");

    const firstDay = 0; // 0 - Sunday, 1 - Monday
    const today = new Date();
    let date = new Date();
    let mode = 0; // selecting days, month, year

    for (let i = 0; i < 7; i++) {
        let dayEl = document.createElement("div");
        dayEl.textContent = new Date(2020, 5, i + firstDay).toLocaleString(window.navigator.language, {
            weekday: "short",
        });
        dayHeader.appendChild(dayEl);
    }
    render();
    calendar.classList.remove("hidden");

    document.addEventListener("keydown", (event) => {
        if (event.key === "ArrowLeft") {
            previous();
        } else if (event.key === "ArrowRight") {
            next();
        }
    });

    function getDaysCount(date) {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
    }

    function render() {
        daysEl.innerHTML = "";
        if (mode === 0) {
            headerEl.textContent = new Date(date.getFullYear(), date.getMonth()).toLocaleString(
                window.navigator.language,
                { month: "long", year: "numeric" }
            );
            headerEl.title = "Select month";

            let totalMonthDays = getDaysCount(date),
                year = date.getFullYear(),
                month = date.getMonth(),
                firstDayOfMonth = new Date(year, month, 1),
                lastDayOfMonth = new Date(year, month, totalMonthDays);

            let daysFromPrevMonth = firstDayOfMonth.getDay() - firstDay,
                daysFromNextMonth = 6 - lastDayOfMonth.getDay() + firstDay;
            daysFromPrevMonth = daysFromPrevMonth < 0 ? daysFromPrevMonth + 7 : daysFromPrevMonth;
            daysFromNextMonth = daysFromNextMonth > 6 ? daysFromNextMonth - 7 : daysFromNextMonth;

            let renderDate = new Date(year, month, 1 - daysFromPrevMonth),
                totalRenderDays = totalMonthDays + daysFromPrevMonth + daysFromNextMonth;

            for (let i = 0; i < totalRenderDays; i++) {
                let dayEl = document.createElement("div");
                dayEl.textContent = renderDate.getDate();
                if (renderDate.getMonth() !== month) {
                    dayEl.classList.add("text-zinc-300");
                }
                if (servedDates.some((d) => d.toDateString() === renderDate.toDateString())) {
                    dayEl.classList.add("bg-blue-100");
                }
                daysEl.appendChild(dayEl);
                renderDate.setDate(renderDate.getDate() + 1);
            }
        } else if (mode === 1) {
            headerEl.textContent = `${date.getFullYear()}`;
            headerEl.title = "Select year";
            dayHeader.classList.add("select");
            daysEl.classList.add("select");
            for (let i = 0; i < 12; i++) {
                let monthEl = document.createElement("button");
                monthEl.classList.add("hover:bg-blue-50", "hover:text-blue-600", "rounded", "cursor-pointer");
                monthEl.textContent = new Date(date.getFullYear(), i).toLocaleString(
                    window.navigator.language,
                    { month: "long" }
                );
                monthEl.addEventListener("click", () => {
                    date = new Date(date.getFullYear(), i);
                    mode = 0;
                    dayHeader.classList.remove("select");
                    daysEl.classList.remove("select");
                    render();
                });
                daysEl.appendChild(monthEl);
            }
        } else {
            const decade = Math.floor(date.getFullYear() / 10) * 10 - 1;
            headerEl.disabled = true;
            headerEl.textContent = `${decade} - ${decade + 11}`;
            headerEl.title = "";
            for (let i = 0; i < 12; i++) {
                let yearEl = document.createElement("button");
                yearEl.classList.add("hover:bg-blue-50", "hover:text-blue-600", "rounded", "cursor-pointer");
                yearEl.textContent = decade + i;
                yearEl.addEventListener("click", () => {
                    date = new Date(decade + i, date.getMonth());
                    mode = 1;
                    headerEl.disabled = false;
                    render();
                });
                daysEl.appendChild(yearEl);
            }
        }
    }

    function previous() {
        date = new Date(
            date.getFullYear() - (mode == 1) - (mode == 2) * 10,
            date.getMonth() - (mode == 0)
        );
        render();
    }

    function next() {
        date = new Date(
            date.getFullYear() + (mode == 1) + (mode == 2) * 10,
            date.getMonth() + (mode == 0)
        );
        render();
    }

    function select() {
        if (mode < 2) {
            mode++;
            render();
        }
    }
</script>

<style>
  #header{
      display: grid;
      grid-template-columns: 1fr 5fr 1fr;    
  }

  #day-header {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 10px;
  }

  /* prevent layout shift */
  #day-header.select {
    visibility: hidden;
    height: 0; 
  }

  #days {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
  }

  #days.select {
      grid-template-columns: repeat(3, 1fr);
  }

  #days div, button {
      padding: 10px;
  }

  #days div:hover {
      background-color: rgb(244 244 245);
  }
</style>
